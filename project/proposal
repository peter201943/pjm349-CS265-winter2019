

Peter Mangelsdorf - Project Proposal, Partner - Henry Dang
LINK TO GITLAB:
https://gitlab.cci.drexel.edu/hd349/hd349-CS265-winter2019-project.git
git@gitlab.cci.drexel.edu:hd349/hd349-CS265-winter2019-project.git

For my CS265 project proposal, I will create a bash script that will process
any ICS file, either from a website (eg; https://www.cs.drexel.edu/~wmm24/teaching/cs265.ics)
or from a local ICS file in your current directory, and turn it into an HTML file that
contains a formatted table.

So it can either be called via :
./bash_script YOUR_LOCAL_ICS_FILE.ICS
./bash_script https://www.cs.drexel.edu/~wmm24/teaching/cs265.ics

Parsing the ICS file won't be too difficult, since it uses tags to denote
the start and end of everything.

So for example, you can determine the start of the calendar by searching for 
"BEGIN:VCALENDAR", and you can determine the end by searching for "END:VCALENDAR".

For the events, they use "BEGIN:VEVENT" and "END:VEVENT", so all we need to do, is for
each segment of "BEGIN:VEVENT" and "END:VEVENT", we parse all of the lines in-between
and extract out the necessary data. It will be assumed that the ICS file passed in
is a valid ICS file, because if a tag or field is missing, then the script will not work.

As we pull each bit of data out, we will be appending every single field of data
into a file called "$file.html", where $file is the name of the original ICS file
without the. So for example, a file like "cs265.ics" would output a file called 
"cs265.html".

Of course, this will be formatted as an HTML table, and CSS styling, like the borders
and cell width, will be automatically generated. So all we are doing is creating a table
and appending each field into the table, like so: "<td>$field_data</td>".

Table headers will correspond to whatever is in the ICS file's VEVENTs. Since there
are optional fields, like TZID (time zone ID), URL, and many many many more, the output
will have at minimum, all of the fields that are seen. This means that if there is only
one single VEVENT with a URL field, then there will be a column for URL, and all other
VEVENTs in the table will have a blank URL column in the table, even if they themselves
don't have the URL field (since the URL field is optional!)

DTSTAMP, DTSTART, and DTEND, which are the timestamps, start times, and end times
will be parsed, so "20130802T103400" will become "2013-08-02 10:34:00"

Any tag that is NOT VEVENT or VCALENDAR will be ignored, so that means all the tags like
VALARM (alarms) and other things will not be parsed.

Lastly, because it's theoretically possible that someone decides to randomly add tons of
whitespace or unnecessary lines, or made-up fields into an ICS file, 
I will make the assumption that all ICS files passed in comply with RFC2445 from IETF,
which can be found at https://www.ietf.org/rfc/rfc2445.txt.

Basically, every single single ICS file generated by Google Calendar or Microsoft Outlook
will comply with RFC2445. This is to ensure that all of the ICS files passed in follow
a nice and consistent pattern, making it easier to parse.

A Makefile will be included with the bash script. In terms of testing,
I will be testing on two made-up ICS files, and the CS265 ICS file. One will be ideal and 
contain only VEVENTs, and the other will contain random things like VALARM 
that need to be ignored. 

The ICS files for testing will be generated using Google Calendar.

We will include a makefile.