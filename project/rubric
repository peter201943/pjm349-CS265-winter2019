
Rubric: Text Version



	Code Correctness
NOVICE:
A reasonable attempt at a solution is made, but with major issues dealing with system level libraries or interfaces that results in a lack of correctness in many cases.

COMPETENT:
System level libraries are avoided by misappropriating alternative system features that result in lack of scale (for example, using argv[] rather than accepting console input for complex inputs). Correctness is exhibited in the majority of cases and any issues are easily	
	
PROFICIENT:
The program is written to standards and meets expectations of best practices. Some system calls or pointer dereferences are not validated, or a minor and trivially corrected error arising from a corner case is observed that does not impact the overall correctness of the program for the majority of cases.

EXCEEDS EXPECTATIONS:
Program executes according to specifications given in the assignment and as documented in the README, including for corner/edge/boundary cases. Program output or result is clearly evident, and is generated by proper use of I/O and system level libraries. All system calls are validated for returned errors, and all pointer de-references are validated first.



	Code Style/Documentation
NOVICE:
A reasonable attempt has been made. All code is in a single function, or is trivially modularized with side-effects or multiple concerns per module.

COMPETENT:
The program is modularized, but not well documented. Functions or modules may have side effects or are not broken into the smallest possible subtasks.

PROFICIENT:
The program is modularized according to expectations of best practice, and the code is documented throughout to provide a narrative of the program's behavior. Inputs and outputs are not all validated, or pre- and postconditions are not always specified.

EXCEEDS EXPECTATIONS:
The program is modularized into small functions with no/minimal side effects. These functions perform a single task and are thoroughly documented to include pre- and postconditions on the inputs, a description of the output, and a description of the algorithm to follow. Code blocks are well documented to describe each step taken, referencing the overall description in the function documentation block. Code is "strict with its outputs, and flexible with its inputs" such that it is robust to minor fluctuations in the input.
	


	Makefile
NOVICE:
A reasonable attempt has been made, but the makefile is not usable to build the program (or results in a compilation/linker error) 

COMPETENT:
The makefile uses hardcoded parameters that are not made flexible for testing.

PROFICIENT:
Makefile is provided that builds the program.

EXCEEDS EXPECTATIONS:
Makefile is provided that enables build, test, and run tasks. These build targets are documented in the README and include a discussion of arguments or environment variables necessary to fully execute the program. 



	Readme
NOVICE:
The README does not include more than one of the name(s), execution instructions, or makefile target descriptions, or one or more of those specifications are incorrect. 

COMPETENT:
The README does not include either the name(s), execution instructions, or makefile target descriptions, but does include the other elements specified.

PROFICIENT:
A thorough README is provided that includes the name(s) of the authors, execution instructions, and makefile target descriptions. 

EXCEEDS EXPECTATIONS:
A thorough README is provided that includes the name(s) of the authors, issues in completing the assignment, execution instructions and makefile target descriptions.

